# -*- coding: utf-8 -*-
"""DicodingReccomender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d7xvcAjUjQZ_HfUG0lfhe7dQwtv_PNSE

# Game Recommendation System

## Import Library dan Data Collection
"""

import pandas as pd
import sklearn
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

import kagglehub

# Download latest version
path = kagglehub.dataset_download("thedevastator/video-game-sales-and-ratings")

print("Path to dataset files:", path)

"""## Data Understanding"""

df=pd.read_csv('/root/.cache/kagglehub/datasets/thedevastator/video-game-sales-and-ratings/versions/2/Video_Games.csv')
df.head()

"""Berikut merupakan beberapa contoh dari data di dataframe"""

df.info()

print('Banyak tipe game: ', len(df.Genre.unique()))
print('Tipe game: ', df.Genre.unique())

"""Terdapat 16928 data dan 17 kolom dalam dataframe.

- **1 kolom dengan tipe data int64**  
  - `index`: Penanda unik untuk setiap entri dalam dataset.  

- **9 kolom dengan tipe data float64**  
  - `Year_of_Release`: Tahun rilis game.  
  - `NA_Sales`, `EU_Sales`, `JP_Sales`, `Other_Sales`, `Global_Sales`: Data penjualan game di berbagai wilayah.  
  - `Critic_Score`, `Critic_Count`, `User_Count`: Skor kritik, jumlah ulasan kritik, dan jumlah ulasan pengguna.  

- **7 kolom dengan tipe data object**  
  - `Name`: Nama game.  
  - `Platform`: Jenis konsol atau perangkat.  
  - `Genre`: Kategori game.  
  - `Publisher`: Nama penerbit game.  
  - `User_Score`: Skor dari pengguna.  
  - `Developer`: Nama pengembang game.  
  - `Rating`: Peringkat game berdasarkan lembaga rating.

## Data Preparation
"""

df.duplicated('Name').sum()

"""Terdapat 5365 game dengan nama yang sama. Untuk mempermudah kita drop data duplikat"""

df.drop_duplicates(subset='Name', inplace=True)

df.duplicated('Name').sum()

"""Setelah didrop, tidak ada game dengan nama yang sama"""

df.isnull().sum()

total_missing = df.isnull().any(axis=1).sum()
print(total_missing)

"""Disini masih terdapat 7444 data yang kosong. Kita drop semua data yang kosong karena tidak perlu digunakan"""

df.dropna(inplace=True)

df.isnull().sum()

"""Setelah didrop, tidak ada data yang sama"""

game_name=df['Name'].to_list()
game_genre=df['Genre'].to_list()
print(len(game_name))
print(len(game_genre))

"""Kita ubah dari data series menjadi list dengan to_list().Disini terdapat 4119 data game."""

game_new = pd.DataFrame({
    'name': game_name,
    'genre': game_genre})
game_new

"""Kita membuat dictionary untuk menentukan pasangan key-value pada data game_name dan game_genre yang telah kita siapkan sebelumnya.

## Model Development
"""

data = game_new
data.sample(5)

"""Cek lagi data yang kita miliki dan assign dataframe dari tahap sebelumnya ke dalam variabel data"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data genre
tf.fit(data['genre'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""Kita menggunakan fungsi TfidfVectorizer dari library scikit-learn. Selain melakukan vektorisasi, TF-IDF juga melakukan proses tokenisasi pada data. Sehingga, kita tidak perlu melakukan tokenisasi lagi."""

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['genre'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""TFIDF digunakan pada sistem rekomendasi untuk menemukan representasi fitur penting dari macam-macam genre dalam data yaitu ['action', 'adventure', 'fighting', 'misc', 'platform', 'playing',
       'puzzle', 'racing', 'role', 'shooter', 'simulation', 'sports',
       'strategy'].Matriks yang dimiliki berukuran (4119, 13). Nilai 4119 merupakan ukuran data dan 13 merupakan matrik kategori game.
"""

tfidf_matrix.todense()

"""Untuk menghasilkan vektor tf-idf dalam bentuk matriks, kita menggunakan fungsi todense()."""

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan jenis game
# Baris diisi dengan nama game

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.name
).sample(13, axis=1).sample(10, axis=0)

"""Berdasarkan output matriks TF-IDF, kita dapat menganalisis distribusi genre dalam dataset game yang diberikan. Setiap nilai dalam tabel menunjukkan tingkat kepentingan (TF-IDF score) suatu genre terhadap masing-masing game. Nilai 1.0 menunjukkan bahwa game tersebut sepenuhnya dikategorikan dalam genre tersebut, sedangkan nilai 0.707107 menunjukkan adanya keterkaitan dengan lebih dari satu genre dengan bobot yang lebih rendah.

Beberapa pola yang dapat diamati:

Beberapa game memiliki bobot **1.0** pada satu genre, yang berarti mereka diklasifikasikan secara eksklusif dalam kategori tersebut:
- **Puzzle**: *Meteos: Disney Magic*  
- **Action**: *Dynasty Warriors 3*  
- **Shooter**: *Land of the Dead: Road to Fiddler's Green*  
- **Sports**: *NFL Blitz 20-02*, *Rugby World Cup 2011*  
- **Misc**: *MTV Music Generator 2*  
- **Simulation**: *Sky Odyssey*  

Beberapa game memiliki bobot **0.707107** pada kategori **Role-Playing**, menunjukkan bahwa mereka memiliki elemen RPG tetapi mungkin juga terkait dengan genre lain:
- *Tactics Ogre: The Knight of Lodis*  
- *Ys: The Oath in Felghana*  
- *The Wizard of Oz: Beyond The Yellow Brick Road*  .

## Cosine Similarity

Setelah berhasil mengidentifikasi korelasi antara game dengan genre gamenya, kita akan menghitung derajat kesamaan (similarity degree) antar game dengan teknik cosine similarity.
"""

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""menghitung derajat kesamaan (similarity degree) antar game dengan teknik cosine similarity."""

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama resto
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['name'], columns=data['name'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap resto
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Berdasarkan hasil cosine similarity, terdapat beberapa pola yang bisa dianalisis dari data yang diberikan. Game seperti Spyro Orange: The Cortex Conspiracy, Rengoku II: The Stairway To H.E.A.V.E.N., Way of the Samurai, dan UFC Undisputed 3 memiliki skor kesamaan yang tinggi (1.0) terhadap Resident Evil dan Way of the Samurai 2, namun tidak memiliki kesamaan dengan F1 2002, Company of Heroes: Opposing Fronts, dan Darksiders: Warmastered Edition (skor 0.0). Hal ini menunjukkan bahwa game-game tersebut mungkin memiliki karakteristik yang mirip dalam genre, mekanik permainan, atau elemen naratif, sementara game seperti F1 2002 dan Company of Heroes: Opposing Fronts cenderung berbeda secara signifikan. Sementara itu, beberapa game seperti Frogger's Adventures: The Rescue, Spyro: Enter the Dragonfly, dan Lost in Blue: Shipwrecked memiliki skor 0.0 di semua kategori, yang menunjukkan bahwa game-game ini memiliki karakteristik yang sangat berbeda dari game lainnya dalam daftar ini. Analisis ini mengindikasikan bahwa cosine similarity dapat digunakan untuk mengelompokkan game berdasarkan kesamaan fitur atau elemen yang mereka miliki."""

def game_recommendations(nama_game, similarity_data=cosine_sim_df, items=data[['name', 'genre']], k=10):
    """
    Rekomendasi Game berdasarkan kemiripan dataframe

    Parameter:
    ---
    nama_game : tipe data string (str)
                Nama Game (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan game sebagai
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_game].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_game agar nama game yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_game, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""Di sini, kita membuat fungsi game_recommendations dengan beberapa parameter sebagai berikut:



*   Nama_game : Nama game (index kemiripan dataframe).
*   Similarity_data : Dataframe mengenai similarity yang telah kita definisikan sebelumnya.
*   Items : Nama dan fitur yang digunakan untuk mendefinisikan kemiripan, dalam hal ini adalah ‘name’ dan ‘genre’.
*   k : Banyak rekomendasi yang ingin diberikan. Kita berikan 10 rekomendasi

## Mendapatkan Rekomendasi
"""

data[data.name.eq('Mario Kart Wii')]

"""Kita coba cari rekomendasi untuk Mario Kart WII"""

# Mendapatkan rekomendasi restoran yang mirip dengan Mario Kart WII
game_recommendations('Mario Kart Wii')

"""Disini kita mendapatkan 10 rekomendasi game yang mirip dengna Mario Kart yaitu dalam genre Racing"""